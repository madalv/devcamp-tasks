// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: campaign.sql

package db

import (
	"context"
)

const createCampaign = `-- name: CreateCampaign :exec
insert into campaigns (name) values (?)
`

func (q *Queries) CreateCampaign(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, createCampaign, name)
	return err
}

const getCampaignsWithoutSources = `-- name: GetCampaignsWithoutSources :many
select c.name, c.id from campaigns c
left join campaigns_sources cs on c.id = cs.campaign_id
where cs.source_id is null
`

type GetCampaignsWithoutSourcesRow struct {
	Name string `json:"name"`
	ID   uint64 `json:"id"`
}

func (q *Queries) GetCampaignsWithoutSources(ctx context.Context) ([]GetCampaignsWithoutSourcesRow, error) {
	rows, err := q.db.QueryContext(ctx, getCampaignsWithoutSources)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCampaignsWithoutSourcesRow{}
	for rows.Next() {
		var i GetCampaignsWithoutSourcesRow
		if err := rows.Scan(&i.Name, &i.ID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
