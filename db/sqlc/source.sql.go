// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: source.sql

package db

import (
	"context"
)

const createSource = `-- name: CreateSource :exec
insert into sources (name) values (?)
`

func (q *Queries) CreateSource(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, createSource, name)
	return err
}

const getSourcesWithMostCampaigns = `-- name: GetSourcesWithMostCampaigns :many
select s.name, count(cs.campaign_id) as nr_campaigns from campaigns_sources cs
join sources s on s.id = cs.source_id
group by cs.source_id
order by nr_campaigns desc
limit 5
`

type GetSourcesWithMostCampaignsRow struct {
	Name        string `json:"name"`
	NrCampaigns int64  `json:"nr_campaigns"`
}

func (q *Queries) GetSourcesWithMostCampaigns(ctx context.Context) ([]GetSourcesWithMostCampaignsRow, error) {
	rows, err := q.db.QueryContext(ctx, getSourcesWithMostCampaigns)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSourcesWithMostCampaignsRow{}
	for rows.Next() {
		var i GetSourcesWithMostCampaignsRow
		if err := rows.Scan(&i.Name, &i.NrCampaigns); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
